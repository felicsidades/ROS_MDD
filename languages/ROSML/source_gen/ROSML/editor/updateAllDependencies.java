package ROSML.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class updateAllDependencies {

  /*package*/ static AbstractCellAction createAction_CLICK(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        for (final SNode dep : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.direct_connections$Xf$k))) {
          if (ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.package_imports$I8CQ)).findFirst((it) -> SPropertyOperations.getString(it, PROPS.package$jRYp) == SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.package$uL2X)) == null && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.import$N7ax)) {
            SNode dependency = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x90345e25471557L, "ROSML.structure.Dependency"));
            SPropertyOperations.assign(dependency, PROPS.package$jRYp, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.package$uL2X));
            ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.package_imports$I8CQ)).addElement(dependency);
          }
          if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(dep, LINKS.node$IXJD), LINKS.dependencies$Dxgk)).findFirst((it) -> SPropertyOperations.getString(it, PROPS.package$jRYp) == SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.package$uL2X)) == null && SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.import$N7ax)) {
            SNode dependency = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x90345e25471557L, "ROSML.structure.Dependency"));
            SPropertyOperations.assign(dependency, PROPS.package$jRYp, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(dep, LINKS.topic$IYsG), LINKS.message$uMau), PROPS.package$uL2X));
            ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(dep, LINKS.node$IXJD), LINKS.dependencies$Dxgk)).addElement(dependency);
          }

        }
        for (final SNode dep : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.port_connections$BohG))) {
          if (ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.package_imports$I8CQ)).findFirst((it) -> SPropertyOperations.getString(it, PROPS.package$jRYp) == SPropertyOperations.getString(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.package$uL2X)) == null && SPropertyOperations.getBoolean(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.import$N7ax)) {
            SNode dependency = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x90345e25471557L, "ROSML.structure.Dependency"));
            SPropertyOperations.assign(dependency, PROPS.package$jRYp, SPropertyOperations.getString(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.package$uL2X));
            ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(dep, LINKS.node$WQmF), LINKS.dependencies$Dxgk)).addElement(dependency);
          }
          if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(dep, LINKS.node$WQmF), LINKS.dependencies$Dxgk)).findFirst((it) -> SPropertyOperations.getString(it, PROPS.package$jRYp) == SPropertyOperations.getString(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.package$uL2X)) == null && SPropertyOperations.getBoolean(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.import$N7ax)) {
            SNode dependency = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x90345e25471557L, "ROSML.structure.Dependency"));
            SPropertyOperations.assign(dependency, PROPS.package$jRYp, SPropertyOperations.getString(SLinkOperations.getTarget(dep, LINKS.message$3geB), PROPS.package$uL2X));
            ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(dep, LINKS.node$WQmF), LINKS.dependencies$Dxgk)).addElement(dependency);
          }

        }


      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action,
    // use the DELETE action for BACKSPACE as well.
    CellAction delete = editorCell.getAction(CellActionType.DELETE);
    CellAction backspace = editorCell.getAction(CellActionType.BACKSPACE);
    if (delete != originalDelete && backspace == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, delete);
    }
    if (delete != originalDelete) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OB);
    }
    if (backspace != originalBackspace) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_BACKSPACE_SET, OB);
    }
  }

  private static final Object OB = new Object();

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    // set cell actions from all imported action maps

    // set cell actions defined directly in this action map
    editorCell.setAction(CellActionType.CLICK, createAction_CLICK(node));
  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps

    // set cell action of the given type defined directly in this action map
    if (Objects.equals(actionType, CellActionType.CLICK)) {
      editorCell.setAction(actionType, createAction_CLICK(node));
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink package_imports$I8CQ = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x90345e254ade13L, "package_imports");
    /*package*/ static final SReferenceLink topic$IYsG = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, 0x5d8e854cb6b9f07L, "topic");
    /*package*/ static final SContainmentLink message$uMau = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6f01L, 0x3cbb554aa9a4b2bcL, "message");
    /*package*/ static final SReferenceLink node$IXJD = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, 0x5d8e854cb6b9f04L, "node");
    /*package*/ static final SContainmentLink dependencies$Dxgk = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x45d1f7827d3faed1L, 0x50ff84ad67116326L, "dependencies");
    /*package*/ static final SContainmentLink direct_connections$Xf$k = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x45d1f7827d4196edL, "direct_connections");
    /*package*/ static final SReferenceLink message$3geB = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x18dbf75c7f6888d7L, "message");
    /*package*/ static final SReferenceLink node$WQmF = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b43365321cL, "node");
    /*package*/ static final SContainmentLink port_connections$BohG = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x1fc42dca76d15d27L, "port_connections");
  }

  private static final class PROPS {
    /*package*/ static final SProperty package$jRYp = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x90345e25471557L, 0x90345e2547155dL, "package");
    /*package*/ static final SProperty package$uL2X = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x18dbf75c7f56da8dL, 0x62bb50d8231fb7ecL, "package");
    /*package*/ static final SProperty import$N7ax = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x18dbf75c7f56da8dL, 0x769b7b9b565d8afbL, "import");
  }
}
