package ROSML.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import java.util.Collections;
import de.itemis.mps.editor.diagram.runtime.model.GeneratedConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import ROSML.behavior.Servidor__BehaviorDescriptor;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.jgraph.ElkLayouter;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class Proyecto_Grafica_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Proyecto_Grafica_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createDiagram_1();
  }

  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, () -> {
      DiagramCreationContext.createDiagram(() -> {
        DiagramContext.withContext(node, () -> editorCell.value, () -> {
          ContextVariables.withValue("thisNode", node, () -> {
            final ContextVariables _variablesContext = ContextVariables.getCurrent();
            IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
              public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.nodos_red$xOcS))) {
                  elements.addAll(accessorFactory.fromSNode(e));
                }
                for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.conexiones$Xf$k))) {
                  elements.addAll(accessorFactory.fromSNode(e));
                }
                for (SNode e : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.conexiones_puerto$zB2s))) {
                  elements.addAll(accessorFactory.fromSNode(e));
                }
                return elements;
              }
              @Override
              public List<IConnectionType> getConnectionTypes() {
                List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "publicador";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.INodo$mE);
                    final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Topico$lR);
                    final String fromPort = from.getPortName();
                    final String toPort = to.getPortName();

                    {
                      SNode conexion = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, "ROSML.structure.Conexion"));
                      SPropertyOperations.assign(conexion, PROPS.etiqueta$Kcok, "publicador");
                      SLinkOperations.setTarget(conexion, LINKS.productor$IXJD, fromNode);
                      SLinkOperations.setTarget(conexion, LINKS.consumidor$IYsG, toNode);
                      ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.conexiones$Xf$k)).addElement(conexion);
                    }
                  }
                  @Override
                  public boolean isValidStart(IConnectionEndpoint from) {
                    final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.INodo$mE);
                    if (fromNode == null) {
                      return false;
                    }
                    final String fromPort = from.getPortName();
                    return true;
                  }
                  @Override
                  public boolean isValidEnd(IConnectionEndpoint to) {
                    final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Topico$lR);
                    if (toNode == null) {
                      return false;
                    }
                    final String toPort = to.getPortName();
                    return true;
                  }
                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "suscriptor";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.INodo$mE);
                    final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Topico$lR);
                    final String fromPort = from.getPortName();
                    final String toPort = to.getPortName();

                    {
                      SNode conexion = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, "ROSML.structure.Conexion"));
                      SPropertyOperations.assign(conexion, PROPS.etiqueta$Kcok, "suscriptor");
                      SLinkOperations.setTarget(conexion, LINKS.productor$IXJD, fromNode);
                      SLinkOperations.setTarget(conexion, LINKS.consumidor$IYsG, toNode);
                      ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.conexiones$Xf$k)).addElement(conexion);
                    }
                  }
                  @Override
                  public boolean isValidStart(IConnectionEndpoint from) {
                    final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.INodo$mE);
                    if (fromNode == null) {
                      return false;
                    }
                    final String fromPort = from.getPortName();
                    return true;
                  }
                  @Override
                  public boolean isValidEnd(IConnectionEndpoint to) {
                    final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Topico$lR);
                    if (toNode == null) {
                      return false;
                    }
                    final String toPort = to.getPortName();
                    return true;
                  }
                }));
                connectionTypes.addAll(Collections.singletonList(new GeneratedConnectionType() {
                  public String getName() {
                    return "peticion";
                  }
                  @Override
                  public void create(final IConnectionEndpoint from, final IConnectionEndpoint to) {
                    final SNode fromNode = SNodeOperations.cast(from.getSNode(), CONCEPTS.Nodo$iX);
                    final SNode toNode = SNodeOperations.cast(to.getSNode(), CONCEPTS.Servidor$I$);
                    final String fromPort = from.getPortName();
                    final String toPort = to.getPortName();

                    {
                      SNode conexion_puerto = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, "ROSML.structure.ConexionPuerto"));
                      SPropertyOperations.assign(conexion_puerto, PROPS.etiqueta$AAcS, "peticion_servicio");
                      SLinkOperations.setTarget(conexion_puerto, LINKS.nodo$WQmF, fromNode);
                      SLinkOperations.setTarget(conexion_puerto, LINKS.servidor$WQOH, toNode);
                      SPropertyOperations.assign(conexion_puerto, PROPS.nombre_puerto$u3X4, toPort);

                      SNode puerto = Servidor__BehaviorDescriptor.getPuerto_id5Yvlr8xnW3d.invoke(toNode, toPort);
                      SLinkOperations.setTarget(puerto, LINKS.conexion$WFQD, conexion_puerto);
                      ListSequence.fromList(SLinkOperations.getChildren(((SNode) _variablesContext.getValue("thisNode")), LINKS.conexiones_puerto$zB2s)).addElement(conexion_puerto);
                    }
                  }
                  @Override
                  public boolean isValidStart(IConnectionEndpoint from) {
                    final SNode fromNode = SNodeOperations.as(from.getSNode(), CONCEPTS.Nodo$iX);
                    if (fromNode == null) {
                      return false;
                    }
                    final String fromPort = from.getPortName();
                    return true;
                  }
                  @Override
                  public boolean isValidEnd(IConnectionEndpoint to) {
                    final SNode toNode = SNodeOperations.as(to.getSNode(), CONCEPTS.Servidor$I$);
                    if (toNode == null) {
                      return false;
                    }
                    final String toPort = to.getPortName();
                    return true;
                  }
                }));
                return connectionTypes;
              }







              @Override
              public boolean runAutoLayout() {
                boolean autoLayoutFlag = false;
                return autoLayoutFlag;
              }

            };

            DiagramModel model = DiagramModel.getModel(editorContext, node, "5031074398567821443", accessor);

            ElkLayouter layouter;

            IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.nodos_red$xOcS))));
            model.setPaletteEntryProvider(paletteEntryProvider);

            if (DiagramCreationContext.isSubdiagram()) {
              editorCell.value = new SubDiagramECell(editorContext, node, model);
            } else {
              editorCell.value = new RootDiagramECell(editorContext, node, model);
              ((RootDiagramECell) editorCell.value).runAutoLayouterOnInit(node, accessor.runAutoLayout());
            }
            editorCell.value.setCellId("Diagram_zeobd3_a");
            editorCell.value.setBig(true);
            setCellContext(editorCell.value);
            if (editorCell.value.getContextGraph() != null) {
              Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
              if (defaultParent instanceof RootDCell) {
                ((RootDCell) defaultParent).resetButtonConfig();
              }
            }
          });
        });
      });
    });



    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink nodos_red$xOcS = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x45d1f7827d32707fL, "nodos_red");
    /*package*/ static final SContainmentLink conexiones$Xf$k = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x45d1f7827d4196edL, "conexiones");
    /*package*/ static final SContainmentLink conexiones_puerto$zB2s = MetaAdapterFactory.getContainmentLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6ef9L, 0x52ae22b4336a28aaL, "conexiones_puerto");
    /*package*/ static final SReferenceLink productor$IXJD = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, 0x5d8e854cb6b9f04L, "productor");
    /*package*/ static final SReferenceLink consumidor$IYsG = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, 0x5d8e854cb6b9f07L, "consumidor");
    /*package*/ static final SReferenceLink nodo$WQmF = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b43365321cL, "nodo");
    /*package*/ static final SReferenceLink servidor$WQOH = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b43365321eL, "servidor");
    /*package*/ static final SReferenceLink conexion$WFQD = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b4336975deL, 0x24577e76ac2158acL, "conexion");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept INodo$mE = MetaAdapterFactory.getInterfaceConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x6e04103ea7fd6c7aL, "ROSML.structure.INodo");
    /*package*/ static final SConcept Topico$lR = MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6f01L, "ROSML.structure.Topico");
    /*package*/ static final SConcept Nodo$iX = MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b6efbL, "ROSML.structure.Nodo");
    /*package*/ static final SConcept Servidor$I$ = MetaAdapterFactory.getConcept(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x2126fce3999aabd2L, "ROSML.structure.Servidor");
  }

  private static final class PROPS {
    /*package*/ static final SProperty etiqueta$Kcok = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x5d8e854cb6b9f03L, 0x45d1f7827d438f77L, "etiqueta");
    /*package*/ static final SProperty etiqueta$AAcS = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b4336a4e17L, "etiqueta");
    /*package*/ static final SProperty nombre_puerto$u3X4 = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x6865cec0cd1aeed0L, "nombre_puerto");
  }
}
