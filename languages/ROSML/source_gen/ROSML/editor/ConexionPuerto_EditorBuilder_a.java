package ROSML.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.model.EditorCell_DiagramElement;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.SNodeEdgeAccessor;
import de.itemis.mps.editor.diagram.runtime.DiagramUtil;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpointReference;
import de.itemis.mps.editor.diagram.runtime.model.EndpointUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionEndpoint_Internal;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class ConexionPuerto_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public ConexionPuerto_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createDiagramConnector_1();
  }

  private EditorCell createDiagramConnector_0(final EditorContext editorContext, final SNode node) {

    final Wrappers._T<EditorCell_DiagramElement> editorCell = new Wrappers._T<EditorCell_DiagramElement>(null);

    ContextVariables.withValue("thisNode", node, () -> {
      final ContextVariables _variablesContext = ContextVariables.getCurrent();
      SNodeEdgeAccessor accessor = new SNodeEdgeAccessor(node) {
        private EditorCell startRoleCell = DiagramUtil.getCellIfNotEmpty(null);
        private EditorCell endRoleCell = DiagramUtil.getCellIfNotEmpty(null);
        private IShape endShape = null;
        private IShape startShape = null;

        private IConnectionEndpointReference endpointFrom = EndpointUtil.createEndpointReferenceForNodeSafe(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("thisNode")), LINKS.nodo$WQmF));
        private IConnectionEndpointReference endpointTo = EndpointUtil.createEndpointReferenceForPortSafe(EndpointUtil.createEndpointReferenceForNodeSafe(SLinkOperations.getTarget(((SNode) _variablesContext.getValue("thisNode")), LINKS.servidor$WQOH)), SPropertyOperations.getString(((SNode) _variablesContext.getValue("thisNode")), PROPS.nombre_puerto$u3X4));

        {
          boolean reverse = false;
          if (reverse) {

            {
              Tuples._2<IConnectionEndpointReference, IConnectionEndpointReference> _tmp_6b1954_b0b0i0a0a1a2a3a8 = MultiTuple.<IConnectionEndpointReference,IConnectionEndpointReference>from(endpointTo, endpointFrom);
              endpointFrom = _tmp_6b1954_b0b0i0a0a1a2a3a8._0();
              endpointTo = _tmp_6b1954_b0b0i0a0a1a2a3a8._1();
            }
            {
              Tuples._2<EditorCell, EditorCell> _tmp_6b1954_c0b0i0a0a1a2a3a8 = MultiTuple.<EditorCell,EditorCell>from(endRoleCell, startRoleCell);
              startRoleCell = _tmp_6b1954_c0b0i0a0a1a2a3a8._0();
              endRoleCell = _tmp_6b1954_c0b0i0a0a1a2a3a8._1();
            }
            {
              Tuples._2<IShape, IShape> _tmp_6b1954_d0b0i0a0a1a2a3a8 = MultiTuple.<IShape,IShape>from(endShape, startShape);
              startShape = _tmp_6b1954_d0b0i0a0a1a2a3a8._0();
              endShape = _tmp_6b1954_d0b0i0a0a1a2a3a8._1();
            }
          }
        }

        @Override
        public void writeFrom(IConnectionEndpoint_Internal endpoint) {
          writeFrom(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
        }
        public void writeFrom(final SNode targetNode, final String port) {
        }
        @Override
        public void writeTo(IConnectionEndpoint_Internal endpoint) {
          writeTo(EndpointUtil.getSNode(endpoint), EndpointUtil.getPortName(endpoint));
        }
        public void writeTo(final SNode targetNode, final String port) {
        }

        @Override
        public IConnectionEndpointReference readFrom() {
          return endpointFrom;
        }
        @Override
        public IConnectionEndpointReference readTo() {
          return endpointTo;
        }
        @Override
        public EditorCell getEndRoleCell() {
          return endRoleCell;
        }
        public IShape getEndShape() {
          return endShape;
        }
        @Override
        public EditorCell getStartRoleCell() {
          return startRoleCell;
        }
        public IShape getStartShape() {
          return startShape;
        }
        public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
          final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
          return elements;
        }


      };

      EditorCell label = DiagramUtil.getCellIfNotEmpty(null);

      accessor.setLabelCell(label);

      editorCell.value = new EditorCell_DiagramElement(editorContext, node, accessor);
      editorCell.value.setCellId("DiagramConnector_wixlza_a");
      editorCell.value.setBig(true);
      setCellContext(editorCell.value);

      if (accessor.getLabelCell() != null) {
        editorCell.value.addEditorCell(accessor.getLabelCell());
      }
      if (accessor.getStartRoleCell() != null) {
        editorCell.value.addEditorCell(accessor.getStartRoleCell());
      }
      if (accessor.getEndRoleCell() != null) {
        editorCell.value.addEditorCell(accessor.getEndRoleCell());
      }
    });

    return editorCell.value;
  }
  private EditorCell createDiagramConnector_1() {
    return createDiagramConnector_0(getEditorContext(), myNode);
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink nodo$WQmF = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b43365321cL, "nodo");
    /*package*/ static final SReferenceLink servidor$WQOH = MetaAdapterFactory.getReferenceLink(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x52ae22b43365321eL, "servidor");
  }

  private static final class PROPS {
    /*package*/ static final SProperty nombre_puerto$u3X4 = MetaAdapterFactory.getProperty(0xf7db56d1b41e4c13L, 0x9756a014feb108beL, 0x52ae22b433653219L, 0x6865cec0cd1aeed0L, "nombre_puerto");
  }
}
