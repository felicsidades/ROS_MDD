package ROSML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Accion;
  private ConceptPresentation props_ConexionDirecta;
  private ConceptPresentation props_ConexionPuerto;
  private ConceptPresentation props_IConexiones;
  private ConceptPresentation props_IElementoRed;
  private ConceptPresentation props_IPuerto;
  private ConceptPresentation props_Mensaje;
  private ConceptPresentation props_Nodo;
  private ConceptPresentation props_Proyecto;
  private ConceptPresentation props_Servicio;
  private ConceptPresentation props_Servidor;
  private ConceptPresentation props_Topico;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Accion:
        if (props_Accion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Accion = cpb.create();
        }
        return props_Accion;
      case LanguageConceptSwitch.ConexionDirecta:
        if (props_ConexionDirecta == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConexionDirecta = cpb.create();
        }
        return props_ConexionDirecta;
      case LanguageConceptSwitch.ConexionPuerto:
        if (props_ConexionPuerto == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConexionPuerto = cpb.create();
        }
        return props_ConexionPuerto;
      case LanguageConceptSwitch.IConexiones:
        if (props_IConexiones == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IConexiones = cpb.create();
        }
        return props_IConexiones;
      case LanguageConceptSwitch.IElementoRed:
        if (props_IElementoRed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IElementoRed = cpb.create();
        }
        return props_IElementoRed;
      case LanguageConceptSwitch.IPuerto:
        if (props_IPuerto == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPuerto = cpb.create();
        }
        return props_IPuerto;
      case LanguageConceptSwitch.Mensaje:
        if (props_Mensaje == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Mensaje");
          props_Mensaje = cpb.create();
        }
        return props_Mensaje;
      case LanguageConceptSwitch.Nodo:
        if (props_Nodo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Nodo = cpb.create();
        }
        return props_Nodo;
      case LanguageConceptSwitch.Proyecto:
        if (props_Proyecto == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Proyecto = cpb.create();
        }
        return props_Proyecto;
      case LanguageConceptSwitch.Servicio:
        if (props_Servicio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Servicio = cpb.create();
        }
        return props_Servicio;
      case LanguageConceptSwitch.Servidor:
        if (props_Servidor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Servidor = cpb.create();
        }
        return props_Servidor;
      case LanguageConceptSwitch.Topico:
        if (props_Topico == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Topico = cpb.create();
        }
        return props_Topico;
    }
    return null;
  }
}
