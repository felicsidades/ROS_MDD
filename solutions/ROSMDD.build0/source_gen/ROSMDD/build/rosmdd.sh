#!/bin/sh
# ---------------------------------------------------------------------
# ROSMDD startup script.
# ---------------------------------------------------------------------
# Generated by MPS
IDEA_PATHS_SELECTOR=ROSMDD1.0

message()
{
  TITLE="Cannot start ROSMDD"
  if [ -n "$(command -v zenity)" ]; then
    zenity --error --title="$TITLE" --text="$1" --no-wrap
  elif [ -n "$(command -v kdialog)" ]; then
    kdialog --error "$1" --title "$TITLE"
  elif [ -n "$(command -v notify-send)" ]; then
    notify-send "ERROR: $TITLE" "$1"
  elif [ -n "$(command -v xmessage)" ]; then
    xmessage -center "ERROR: $TITLE: $1"
  else
    printf "ERROR: %s\n%s\n" "$TITLE" "$1"
  fi
}

UNAME=$(command -v uname)
GREP=$(command -v egrep)
CUT=$(command -v cut)
READLINK=$(command -v readlink)
REALPATH=$(command -v realpath)
XARGS=$(command -v xargs)
DIRNAME=$(command -v dirname)
CAT=$(command -v cat)
SED=$(command -v sed)

if [ -z "$UNAME" ] || [ -z "$GREP" ] || [ -z "$CUT" ] || [ -z "$DIRNAME" ] || [ -z "$CAT" ] || [ -z "$REALPATH" ] || \
   [ -z "$XARGS" ] || [ -z "$SED" ]; then
  message "Required tools are missing - check beginning of \"$0\" file for details."
  exit 1
fi

# shellcheck disable=SC2034
GREP_OPTIONS=''
OS_TYPE=$("$UNAME" -s)
OS_ARCH=$(uname -m)

# ---------------------------------------------------------------------
# Ensure $IDE_HOME points to the directory where the IDE is installed.
# ---------------------------------------------------------------------
IDE_BIN_HOME=$("$DIRNAME" "$("$REALPATH" "$0")")
IDE_HOME=$("$DIRNAME" "${IDE_BIN_HOME}")
CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"


# ---------------------------------------------------------------------
# Locate a JDK installation directory command -v will be used to run the IDE.
# Try (in order): $ROSMDD_JDK, .../rosmdd.jdk, .../jbr, .../jbr-x86, $JDK_HOME, $JAVA_HOME, "java" in $PATH.
# ---------------------------------------------------------------------
IDEA_VENDOR_NAME='null'
# shellcheck disable=SC2154
if [ -n "$ROSMDD_JDK" ] && [ -x "$ROSMDD_JDK/bin/java" ]; then
  JDK="$ROSMDD_JDK"
fi

if [ -z "$JDK" ] && [ -s "${XDG_CONFIG_HOME:-$HOME/.config}/$IDEA_VENDOR_NAME/ROSMDD1.0/rosmdd.jdk" ]; then
  USER_JRE=$("$CAT" "${XDG_CONFIG_HOME:-$HOME/.config}/$IDEA_VENDOR_NAME/ROSMDD1.0/rosmdd.jdk")
  if [ -x "$USER_JRE/bin/java" ]; then
    JDK="$USER_JRE"
  fi
fi

if [ -z "$JDK" ] && [ "$OS_TYPE" = "Linux" ]; then
  OS_ARCH=$("$UNAME" -m)
  if [ "$OS_ARCH" = "x86_64" ] && [ -d "$IDE_HOME/jbr" ]; then
    JDK="$IDE_HOME/jbr"
  fi
  if [ -z "$JDK" ] && [ -d "$IDE_HOME/jbr-x86" ] && "$IDE_HOME/jbr-x86/bin/java" -version > /dev/null 2>&1 ; then
    JDK="$IDE_HOME/jbr-x86"
  fi
fi

# shellcheck disable=SC2153
if [ -z "$JDK" ] && [ -n "$JDK_HOME" ] && [ -x "$JDK_HOME/bin/java" ]; then
  JDK="$JDK_HOME"
fi

if [ -z "$JDK" ] && [ -n "$JAVA_HOME" ] && [ -x "$JAVA_HOME/bin/java" ]; then
  JDK="$JAVA_HOME"
fi

if [ -z "$JDK" ]; then
  JDK_PATH=$(command -v java)

  if [ -n "$JDK_PATH" ]; then
    if [ "$OS_TYPE" = "FreeBSD" ] || [ "$OS_TYPE" = "MidnightBSD" ]; then
      JAVA_LOCATION=$(JAVAVM_DRYRUN=yes java | "$GREP" '^JAVA_HOME' | "$CUT" -c11-)
      if [ -x "$JAVA_LOCATION/bin/java" ]; then
        JDK="$JAVA_LOCATION"
      fi
    elif [ "$OS_TYPE" = "SunOS" ]; then
      JAVA_LOCATION="/usr/jdk/latest"
      if [ -x "$JAVA_LOCATION/bin/java" ]; then
        JDK="$JAVA_LOCATION"
      fi
    elif [ "$OS_TYPE" = "Darwin" ]; then
      JAVA_LOCATION=$(/usr/libexec/java_home)
      if [ -x "$JAVA_LOCATION/bin/java" ]; then
        JDK="$JAVA_LOCATION"
      fi
    fi
  fi

  if [ -z "$JDK" ] && [ -n "$JDK_PATH" ] && [ -x "$READLINK" ] && [ -x "$XARGS" ]; then
    JAVA_LOCATION=$("$READLINK" -f "$JDK_PATH")
    case "$JAVA_LOCATION" in
      */jre/bin/java)
        JAVA_LOCATION=$(echo "$JAVA_LOCATION" | "$XARGS" "$DIRNAME" | "$XARGS" "$DIRNAME" | "$XARGS" "$DIRNAME")
        if [ ! -d "$JAVA_LOCATION/bin" ]; then
          JAVA_LOCATION="$JAVA_LOCATION/jre"
        fi
        ;;
      *)
        JAVA_LOCATION=$(echo "$JAVA_LOCATION" | "$XARGS" "$DIRNAME" | "$XARGS" "$DIRNAME")
        ;;
    esac
    if [ -x "$JAVA_LOCATION/bin/java" ]; then
      JDK="$JAVA_LOCATION"
    fi
  fi
fi

JAVA_BIN="$JDK/bin/java"
if [ -z "$JDK" ] || [ ! -x "$JAVA_BIN" ]; then
  X86_JRE_URL="https://download.jetbrains.com/idea/jbr-for-201.6668.121-linux-x86.tar.gz"
  # shellcheck disable=SC2166
  if [ -n "$X86_JRE_URL" ] && [ ! -d "$IDE_HOME/jbr-x86" ] && [ "$OS_ARCH" = "i386" -o "$OS_ARCH" = "i686" ]; then
    message "To run IDE on a 32-bit system, please download 32-bit Java runtime from \"$X86_JRE_URL\" and unpack it into \"jbr-x86\" directory."
  else
  message "No JDK found. Please validate either ROSMDD_JDK, JDK_HOME or JAVA_HOME environment variable points to valid JDK installation."
  fi
  exit 1
fi

"$GREP" -q -E -e "OS_ARCH=\"(x86_64|amd64)\"" "$JDK/release" 2> /dev/null && BITS="64" || BITS=""

# ---------------------------------------------------------------------
# Collect JVM options and IDE properties.
# ---------------------------------------------------------------------
# shellcheck disable=SC2154
if [ -n "$ROSMDD_PROPERTIES" ]; then
  IDE_PROPERTIES_PROPERTY="-Didea.properties.file=$ROSMDD_PROPERTIES"
fi

VM_OPTIONS_FILE=""
USER_VM_OPTIONS_FILE=""
# shellcheck disable=SC2154
if [ -n "$IDEA_VM_OPTIONS" ] && [ -r "$IDEA_VM_OPTIONS" ]; then
  # 1. $<IDE_NAME>_VM_OPTIONS
  VM_OPTIONS_FILE="$IDEA_VM_OPTIONS"
else
  # custom value from MPS team to reduce typo risk
  VMOPTIONS_FNAME=rosmdd${BITS}.vmoptions
  # 
  # 2. <IDE_HOME>/bin/[<os>/]<bin_name>.vmoptions ...
  if [ -r "${IDE_BIN_HOME}/${VMOPTIONS_FNAME}" ]; then
    VM_OPTIONS_FILE="${IDE_BIN_HOME}/${VMOPTIONS_FNAME}"
  else
    test "${OS_TYPE}" = "Darwin" && OS_SPECIFIC="mac" || OS_SPECIFIC="linux"
    if [ -r "${IDE_BIN_HOME}/${OS_SPECIFIC}/${VMOPTIONS_FNAME}" ]; then
      VM_OPTIONS_FILE="${IDE_BIN_HOME}/${OS_SPECIFIC}/${VMOPTIONS_FNAME}"
    fi
  fi
  # ... [+ <IDE_HOME>.vmoptions (Toolbox) || <config_directory>/<bin_name>.vmoptions]
  if [ -r "${IDE_HOME}.vmoptions" ]; then
    USER_VM_OPTIONS_FILE="${IDE_HOME}.vmoptions"
  elif [ -r "${CONFIG_HOME}/${IDEA_VENDOR_NAME}/${IDEA_PATHS_SELECTOR}/${VMOPTIONS_FNAME}" ]; then
    USER_VM_OPTIONS_FILE="${CONFIG_HOME}/${IDEA_VENDOR_NAME}/${IDEA_PATHS_SELECTOR}/${VMOPTIONS_FNAME}"
  fi
fi

VM_OPTIONS=""
USER_GC=""
if [ -n "$USER_VM_OPTIONS_FILE" ]; then
  "$GREP" -q -e "-XX:\+.*GC" "$USER_VM_OPTIONS_FILE" && USER_GC="yes"
fi
if [ -n "$VM_OPTIONS_FILE" -o -n "$USER_VM_OPTIONS_FILE" ]; then
  if [ -z "$USER_GC" -o -z "$VM_OPTIONS_FILE" ]; then
    VM_OPTIONS=$("$CAT" "$VM_OPTIONS_FILE" "$USER_VM_OPTIONS_FILE" 2> /dev/null | "$GREP" -v -e "^#.*")
  else
    VM_OPTIONS=$({ "$GREP" -v -e "-XX:\+Use.*GC" "$VM_OPTIONS_FILE"; "$CAT" "$USER_VM_OPTIONS_FILE"; } 2> /dev/null | "$GREP" -v -e "^#.*")
  fi
else
  message "Cannot find a VM options file"
fi

CLASSPATH="$IDE_HOME/lib/annotations.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/app.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/bouncy-castle.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/branding.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/byte-buddy-agent.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/eclipse.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/error-prone-annotations.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/external-system-rt.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/externalProcess-rt.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/forms_rt.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/groovy.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/grpc.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/idea_rt.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/intellij-coverage-agent-1.0.723.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/intellij-test-discovery.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/java-impl.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/javac2.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/jetbrains-annotations.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/jps-model.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/junit4.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/kotlin-compiler-client-embeddable-1.9.0.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/kotlinx-metadata-jvm-0.7.0.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/lib.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-annotations.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-behavior-api.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-behavior-runtime.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-boot-util.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-boot.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-closures.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-collections.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-constraints-runtime.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-context.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-core.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-editor-api.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-editor-runtime.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-editor.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-environment.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-feedback-api.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-generator.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-icons.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-messages-api.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-messages-for-legacy-constraints.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-messages-for-rules.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-messages-for-structure.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-openapi.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-persistence.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-platform.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-problem.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-project-check.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-references.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-resources.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-resources_en.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-test.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-textgen.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-tips.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-tuples.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/mps-workbench.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/platform-loader.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/protobuf.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/pty4j.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/rd.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/stats.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/testFramework.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/util-8.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/util.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/util_rt.jar"
CLASSPATH="$CLASSPATH:$IDE_HOME/lib/ant/lib/ant.jar"
CLASSPATH="$CLASSPATH:$JDK/lib/tools.jar"
# shellcheck disable=SC2154
if [ -n "$ROSMDD_CLASSPATH" ]; then
  CLASSPATH="$CLASSPATH:$ROSMDD_CLASSPATH"
fi

# ---------------------------------------------------------------------
# Run the IDE.
# ---------------------------------------------------------------------
IFS="$(printf '\n\t')"
# shellcheck disable=SC2086
MAIN_CLASS=jetbrains.mps.Launcher
"$JAVA_BIN" \
  -classpath "$CLASSPATH" \
  ${VM_OPTIONS} \
  "-XX:ErrorFile=$HOME/java_error_in_ROSMDD_%p.log" \
  "-XX:HeapDumpPath=$HOME/java_error_in_ROSMDD.hprof" \
  "-Djb.vmOptionsFile=${USER_VM_OPTIONS_FILE:-${VM_OPTIONS_FILE}}" \
  -Didea.paths.selector=$IDEA_PATHS_SELECTOR \
  ${IDE_PROPERTIES_PROPERTY} \
  ${IDE_JVM_ARGS} \
  -Didea.jre.check=true \
  -Djna.boot.library.path="${IDE_HOME}/lib/jna" \
  -Dpty4j.preferred.native.folder="${IDE_HOME}/lib/pty4j" \
  -Djava.system.class.loader=com.intellij.util.lang.PathClassLoader \
  -Didea.vendor.name=$IDEA_VENDOR_NAME \
  --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.nio.charset=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.base/java.time=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens=java.base/jdk.internal.vm=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/sun.nio.fs=ALL-UNNAMED --add-opens=java.base/sun.security.ssl=ALL-UNNAMED --add-opens=java.base/sun.security.util=ALL-UNNAMED --add-opens=java.desktop/java.awt=ALL-UNNAMED --add-opens=java.desktop/java.awt.dnd.peer=ALL-UNNAMED --add-opens=java.desktop/java.awt.event=ALL-UNNAMED --add-opens=java.desktop/java.awt.image=ALL-UNNAMED --add-opens=java.desktop/java.awt.peer=ALL-UNNAMED --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED --add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED --add-opens=java.desktop/sun.awt.datatransfer=ALL-UNNAMED --add-opens=java.desktop/sun.awt.image=ALL-UNNAMED --add-opens=java.desktop/sun.awt=ALL-UNNAMED --add-opens=java.desktop/sun.font=ALL-UNNAMED --add-opens=java.desktop/sun.java2d=ALL-UNNAMED --add-opens=java.desktop/sun.swing=ALL-UNNAMED --add-opens=jdk.attach/sun.tools.attach=ALL-UNNAMED --add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-opens=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED --add-opens=jdk.jdi/com.sun.tools.jdi=ALL-UNNAMED --add-opens=java.desktop/sun.awt.X11=ALL-UNNAMED --add-opens=java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED \
  ${MAIN_CLASS} \
  "$@"
